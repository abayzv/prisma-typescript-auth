// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  refreshTokens RefreshToken[]
  profile       Profile?
  roleID        Int
  role          Role           @relation(fields: [roleID], references: [id])
  parent        Parent?
  classId       String?
  class         Class?         @relation(fields: [classId], references: [id])
  teacherClass  Class?         @relation(name: "TeacherClass")
  subjectId     String?        @unique
  subject       Subject?       @relation(fields: [subjectId], references: [id])
  transaction   Transaction[]
  score         Score[]
  activityLog   ActivityLog[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id          String   @id @default(uuid())
  hashedToken String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Profile {
  id        String    @id @default(uuid())
  name      String
  birthDate DateTime?
  address   String?
  gender    String?
  religion  String?
  photo     String?
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Parent {
  id       String    @id @default(uuid())
  name     String
  address  String
  phone    String
  userId   String     @unique
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Class {
  id        String    @id @default(uuid())
  name      String
  teacherId String    @unique
  teacher   User      @relation(name: "TeacherClass", fields: [teacherId], references: [id])
  student   User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ScoreCategory {
  id        String    @id @default(uuid())
  name      String
  score     Score[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Score {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  score     Int
  categoryId String
  category  ScoreCategory @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  user      User[]
  score     Score[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentType {
  registration
  monthly
  semester
}

model PaymentMethod {
  id        Int       @id @default(autoincrement())
  name      String
  image     String
  transaction Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String    @id @default(uuid())
  referenceNumber String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  items   TransactionDetail[]
  paymentMethodId Int 
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  status    String    @default("pending")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  name      String
  type      PaymentType @default(monthly)
  amount    Int
  transaction      TransactionDetail[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionDetail {
  transactionId    String
  transaction      Transaction     @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id])
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([transactionId, paymentId])
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String
  user       User[]
  permissions RolePermission[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model RolePermission {
  roleId     Int
  role      Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId Int
  permission Permission   @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())

  @@id([roleId, permissionId])
}

enum PermissionAction {
  GET
  POST
  PUT
  DELETE
}

model Permission {
  id   Int        @id @default(autoincrement())
  name String     @unique
  action PermissionAction @default(GET)
  menu String
  roles RolePermission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id          String   @id @default(uuid())
  ipAddress   String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  action      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
